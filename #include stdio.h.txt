#include <stdio.h>
#include <wiringPi.h>
#include <softTone.h>
#include <softPwm.h>
#include <string.h>

// 서보 모터와 부저의 GPIO 핀 번호 정의
#define SERVO 18       // 서보 모터 핀 (GPIO 18)
#define BUZZER 17      // 부저 핀 (GPIO 17)

// 키패드 각 버튼에 해당하는 GPIO 핀 번호 정의
#define KEY_1 27
#define KEY_2 22
#define KEY_3 23
#define KEY_4 24
#define KEY_5 25
#define KEY_6 5
#define KEY_7 6
#define KEY_8 12
#define KEY_9 13
#define KEY_ASTAR 19
#define KEY_0 16
#define KEY_SHARP 26

#define MAX_KEY_BT_NUM 12
#define OPEN 0
#define CLOSE 1

// 주파수 정의
#define DO_LOW 523
#define RE 587
#define MI 659
#define FA 698
#define SOL 784
#define RA 880
#define SI 987
#define DO_HIGH 1046

const int KeyTable[12] = {KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9, KEY_ASTAR, KEY_0, KEY_SHARP};
const int DoorState[2] = {OPEN, CLOSE};
const char Keylist[12] = {'1', '2', '3', '4', '5', '6', '7', '8', '9', '*', '0', '#'};

typedef unsigned int UINT;
typedef unsigned char UCHAR;

// 상태 정의
#define STATE_NORMAL 0
#define STATE_SETTING_PASSWORD 1

// 키패드 입력 읽기 (다중 키 입력 방지)
int KeypadRead(void) {
    int i, nKeypadstate = 0;
    for (i = 0; i < MAX_KEY_BT_NUM; i++) {
        if (!digitalRead(KeyTable[i])) {
            nKeypadstate = (1 << i);
            break; // 첫 번째 눌린 키만 반환
        }
    }
    return nKeypadstate;
}

// 스케일에 따른 주파수 반환
UINT SevenScale(UCHAR scale) {
    switch (scale) {
        case 0: return DO_LOW;
        case 1: return RE;
        case 2: return MI;
        case 3: return FA;
        case 4: return SOL;
        case 5: return RA;
        case 6: return SI;
        case 7: return DO_HIGH;
    }
    return 0;
}

// 부저 주파수 변경
void Change_FREQ(UINT freq) {
    softToneWrite(BUZZER, freq);
}

// 부저 소리 중지
void STOP_FREQ(void) {
    softToneWrite(BUZZER, 0);
}

// 부저 초기화
void Buzzer_Init(void) {
    softToneCreate(BUZZER);
    STOP_FREQ();
}

// 비밀번호 비교 (0: 일치, 1: 불일치)
int Compare(char Input[], char Prev[]) {
    for (int i = 0; i < 4; i++) {
        if (Input[i] != Prev[i]) {
            return 1;
        }
    }
    return 0;
}

// 키패드 상태를 문자로 변환
char KEY(int Inputkey) {
    switch (Inputkey) {
        case 1: return Keylist[0];
        case 2: return Keylist[1];
        case 4: return Keylist[2];
        case 8: return Keylist[3];
        case 16: return Keylist[4];
        case 32: return Keylist[5];
        case 64: return Keylist[6];
        case 128: return Keylist[7];
        case 256: return Keylist[8];
        case 512: return Keylist[9];
        case 1024: return Keylist[10];
        case 2048: return Keylist[11];
    }
    return '\0';
}

// 키 릴리즈 대기
void WaitForKeyRelease(void) {
    while (KeypadRead() != 0) {
        delay(50); // 릴리즈 대기
    }
}

int main() {
    if (wiringPiSetupGpio() == -1) return 1;

    int i, nKeypadstate, FailCnt = 0, State = DoorState[CLOSE];
    char InputPwd[5] = {'0', '0', '0', '0', '\0'}; // 입력 비밀번호 (null 종료)
    char Pwd[5] = {'0', '0', '0', '0', '\0'};      // 저장된 비밀번호 (null 종료)
    int j = 0;
    int currentState = STATE_NORMAL;

    Buzzer_Init();
    softPwmCreate(SERVO, 0, 200);
    for (i = 0; i < MAX_KEY_BT_NUM; i++) {
        pinMode(KeyTable[i], INPUT);
        pullUpDnControl(KeyTable[i], PUD_UP); // 풀업 저항 활성화
    }

    puts("\nINPUT PASSWD (default :0000) : \b"); // 기본 비밀번호는 0000

    while (State == DoorState[CLOSE]) {
        STOP_FREQ();
        delay(100);
        nKeypadstate = KeypadRead();

        if (nKeypadstate != 0) {
            if (currentState == STATE_NORMAL) {
                // '#' 키를 눌러 비밀번호 설정 모드로 진입
                if (nKeypadstate == 2048) { // '#' 키
                    printf("%c\n", KEY(nKeypadstate));
                    puts("새 비밀번호를 입력하세요 (4자리): ");
                    j = 0;
                    currentState = STATE_SETTING_PASSWORD;
                    WaitForKeyRelease(); // 키 릴리즈 대기
                }
                // '*' 키를 눌러 비밀번호 확인
                else if (nKeypadstate == 512) { // '*' 키
                    if (j == 4) { // 이미 4자리 입력되었을 경우
                        // 비밀번호 확인
                        if (Compare(InputPwd, Pwd) == 0) {
                            puts("\n비밀번호가 맞습니다. DOOR OPEN!");
                            for (i = 0; i < 3; i++) {
                                Change_FREQ(SOL);
                                delay(300);
                                STOP_FREQ();
                            }
                            FailCnt = 0;
                            State = DoorState[OPEN];
                            softPwmWrite(SERVO, 25); // 서보 모터 90도 회전
                            delay(2000);
                            softPwmWrite(SERVO, 15); // 원래 위치로 복귀
                        } 
                        else {
                            Change_FREQ(MI);
                            delay(300);
                            puts("\nNot Correct PWD! Please Retry!");
                            FailCnt++;
                            if (FailCnt > 2) {
                                Change_FREQ(RE);
                                delay(300);
                                puts("3회 이상 틀렸습니다. 10초 후에 다시 시도해 주세요.");
                                delay(10000);
                                FailCnt = 0;
                            }
                        }
                        // 입력 초기화
                        memset(InputPwd, '0', 4);
                        InputPwd[4] = '\0';
                        j = 0;
                        WaitForKeyRelease(); // 키 릴리즈 대기
                    }
                    else {
                        puts("\n비밀번호가 완성되지 않았습니다. 4자리 숫자를 먼저 입력하세요.");
                        WaitForKeyRelease(); // 키 릴리즈 대기
                    }
                }
                // 숫자 키 입력
                else {
                    if (j < 4) {
                        InputPwd[j] = KEY(nKeypadstate);
                        printf("%c", InputPwd[j]); // 입력된 숫자 표시
                        j++;
                        WaitForKeyRelease(); // 키 릴리즈 대기
                    }
                    else {
                        puts("\n이미 4자리 숫자를 입력했습니다. '*' 키를 눌러 비밀번호를 확인하세요.");
                        WaitForKeyRelease(); // 키 릴리즈 대기
                    }
                }
            }
            else if (currentState == STATE_SETTING_PASSWORD) {
                // '#' 키를 눌러 비밀번호 설정 완료
                if (nKeypadstate == 2048) { // '#' 키
                    if (j == 4) {
                        Pwd[4] = '\0'; // null 종료
                        puts("\n비밀번호가 설정되었습니다.");
                        // 경쾌한 소리 재생
                        for (i = 0; i < 3; i++) {
                            Change_FREQ(SOL);
                            delay(300);
                            STOP_FREQ();
                        }
                    }
                    else {
                        puts("\n비밀번호 길이가 맞지 않습니다. 다시 시도하세요.");
                    }
                    currentState = STATE_NORMAL;
                    j = 0;
                    WaitForKeyRelease(); // 키 릴리즈 대기
                }
                // 숫자 키 입력
                else {
                    if (j < 4) {
                        Pwd[j] = KEY(nKeypadstate);
                        printf("%c", Pwd[j]); // 입력된 숫자 표시
                        j++;
                        WaitForKeyRelease(); // 키 릴리즈 대기
                    }
                    else {
                        puts("\n이미 4자리 숫자를 입력했습니다. '#' 키를 눌러 비밀번호를 설정하세요.");
                        WaitForKeyRelease(); // 키 릴리즈 대기
                    }
                }
            }
        }
    }
    return 0;
}
